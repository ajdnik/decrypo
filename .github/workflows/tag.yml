name: push-new-tag
on:
  create:
    tags:
      - "refs/tags/*.*.*"
jobs:
  test:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    name: test-${{ matrix.os }}
    steps:
      - name: Setup Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
        env:
          GOPATH: ${{ runner.workspace }}
          GOBIN: ${{ runner.workspace }}/bin
      - name: Checkout Code
        uses: actions/checkout@v1
        with:
          path: src/github.com/${{ github.repository }}
      - name: Setup Go Environment
        run: |
          mkdir -p $GOPATH/bin
        shell: bash
      - name: Get Dependencies
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          $GOBIN/dep ensure
        shell: bash
      - name: Run Tests
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          go test ./...
        shell: bash 
  build_artifacts:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    name: build-artifacts-${{ matrix.os }}
    steps:
      - name: Install Cross Compilation Tools
        run: |
          sudo apt-get install -y gcc-mingw-w64 zip
        shell: bash
        if: runner.os == 'Linux'
      - name: Setup Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
        env:
          GOPATH: ${{ runner.workspace }}
          GOBIN: ${{ runner.workspace }}/bin
      - name: Checkout Code
        uses: actions/checkout@v1
        with:
          path: src/github.com/${{ github.repository }}
      - name: Setup Go Environment
        run: |
          mkdir -p $GOPATH/bin
          mkdir -p $GOPATH/src
          mkdir -p $GOPATH/pkg
        shell: bash
      - name: Get Dependencies
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          $GOBIN/dep ensure
        shell: bash
      - name: Build Artifacts For Windows 64bit
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          export TIME=`date +%FT%T%z`
          export NAME=$(echo "${OS}_${ARCH}" | tr '[:upper:]' '[:lower:]')
          mkdir -p "dist/${NAME}"
          go build -ldflags "-s -w -X github.com/ajdnik/decrypo/build.Version=${TAG} -X github.com/ajdnik/decrypo/build.Datetime=${TIME}" -o "dist/${NAME}/decrypo.exe"
        shell: bash
        if: runner.os == 'Linux'
        env:
          TAG: ${{ github.ref }}
          OS: windows
          ARCH: amd64
          GOOS: windows
          GOARCH: amd64
          CGO_ENABLED: 1
          CC: x86_64-w64-mingw32-gcc
      - name: Build Artifacts For Windows 32bit
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          export TIME=`date +%FT%T%z`
          export NAME=$(echo "${OS}_${ARCH}" | tr '[:upper:]' '[:lower:]')
          mkdir -p "dist/${NAME}"
          go build -ldflags "-s -w -X github.com/ajdnik/decrypo/build.Version=${TAG} -X github.com/ajdnik/decrypo/build.Datetime=${TIME}" -o "dist/${NAME}/decrypo.exe"
        shell: bash
        if: runner.os == 'Linux'
        env:
          TAG: ${{ github.ref }}
          OS: windows
          ARCH: x86
          GOOS: windows
          GOARCH: 386
          CGO_ENABLED: 1
          CC: i686-w64-mingw32-gcc
      - name: Build Artifacts For MacOS
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          export TIME=`date +%FT%T%z`
          export NAME=$(echo "${OS}_${ARCH}" | tr '[:upper:]' '[:lower:]')
          mkdir -p "dist/${NAME}"
          go build -ldflags "-s -w -X github.com/ajdnik/decrypo/build.Version=${TAG} -X github.com/ajdnik/decrypo/build.Datetime=${TIME}" -o "dist/${NAME}/decrypo"
        shell: bash
        if: runner.os == 'macOS'
        env:
          TAG: ${{ github.ref }}
          OS: ${{ runner.os }}
          ARCH: amd64
          CGO_ENABLED: 1
      - name: Archive Artifacts For Windows 64bit
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          export NAME=$(echo "${OS}_${ARCH}" | tr '[:upper:]' '[:lower:]')
          cd "dist/${NAME}" && zip -r "../${NAME}.zip" ./ 
          cd ../ && shasum -a 256 "${NAME}.zip" > "${NAME}.sha256"
          rm -rf "${NAME}"
        shell: bash
        if: runner.os == 'Linux'
        env:
          OS: windows
          ARCH: amd64
      - name: Archive Artifacts For Windows 32bit
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          export NAME=$(echo "${OS}_${ARCH}" | tr '[:upper:]' '[:lower:]')
          cd "dist/${NAME}" && zip -r "../${NAME}.zip" ./ 
          cd ../ && shasum -a 256 "${NAME}.zip" > "${NAME}.sha256"
          rm -rf "${NAME}"
        shell: bash
        if: runner.os == 'Linux'
        env:
          OS: windows
          ARCH: x86
      - name: Archive Artifacts For MacOS
        run: |
          cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
          export NAME=$(echo "${OS}_${ARCH}" | tr '[:upper:]' '[:lower:]')
          cd "dist/${NAME}" && tar -cvzf "../${NAME}.tar.gz" *
          cd ../ && shasum -a 256 "${NAME}.tar.gz" > "${NAME}.sha256"
          rm -rf "${NAME}"
        shell: bash
        if: runner.os == 'macOS'
        env:
          OS: ${{ runner.os }}
          ARCH: amd64
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ runner.os }}
          path: ${{ runner.workspace }}/src/github.com/${{ github.repository }}/dist
  create_release:
    runs-on: ubuntu-latest
    name: create-release
    needs: [test, build_artifacts]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: Create Release
        uses: actions/create-release@v1
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v1
        with:
          name: Linux
      - name: Download macOS Artifacts
        uses: actions/download-artifact@v1
        with:
          name: macOS
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: Linux/windows_amd64.zip
          asset_name: windows_amd64.zip
          asset_content_type: application/zip
      - name: Upload Windows Binary SHA Sum
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: Linux/windows_amd64.sha256
          asset_name: windows_amd64.sha256
          asset_content_type: application/xml
      - name: Upload Windows 32bit Binary
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: Linux/windows_x86.zip
          asset_name: windows_x86.zip
          asset_content_type: application/zip
      - name: Upload Windows 32bit Binary SHA Sum
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: Linux/windows_x86.sha256
          asset_name: windows_x86.sha256
          asset_content_type: application/xml
      - name: Upload macOS Binary
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: macOS/macos_amd64.tar.gz
          asset_name: macos_amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload macOS Binary SHA Sum
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: macOS/macos_amd64.sha256
          asset_name: macos_amd64.sha256
          asset_content_type: text/plain
